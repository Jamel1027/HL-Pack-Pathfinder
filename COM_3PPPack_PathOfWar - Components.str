<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- This file contains the definitions of components associated with traits such as
      attributes, skills, special abilities, etc.
-->

<document signature="Hero Lab Structure">
  <loadonce key="COM_3PPPack_PathOfWar - Components"/>

  <!-- ==================================================  -->
  <component
    id="PWManuever"
    name="Path of War Manuevers"
    autocompset="no"
    hasshortname="no"
    ispublic="yes">

    <!-- Fields -->
    <field
      id="mPreReq"
      name="Prerequisites Manuevers"
      type="user"
      maxlength="0">
    </field>
    <field
      id="mDC"
      name="Manuever DC"
      type="derived"
      maxlength="0">
      <calculate phase="PostAttr" priority="10000">
        <after name="PoW Calc Attribute Bonus"/><![CDATA[
        ~ Calculate our DC as 10 plus Maneuver level plus the Attribute Score.
        ~ We will also add in the "school of magic" DC bonus. We are using the schools in the same way as LW to give a single place to increase all the DC's of a specific Discipline.
        @value = 10 + tagvalue[mLevel.?] + linkage[table].field[powInitAttr].value + hero.findchild[SplSchool,"PathOfWar.Discipline & " & tagids[Discipline.?]].field[schDC].value
        ]]></calculate>
    </field>
    <field
      id="mIL"
      name="Initiator Level"
      type="derived"
      maxlength="0">
      <calculate phase="PostLevel" priority="20">
        <after name="PoW Calc IL"/><![CDATA[
        ~ Get our current IL from the panel agent
        @value = linkage[table].field[cIL].value
        ]]></calculate>
    </field>
    <field
      id="mIM"
      name="Initiation Modifier"
      type="derived"
      maxlength="0">
      <calculate phase="PostAttr" priority="10000">
        <after name="PoW Calc Attribute Bonus"/><![CDATA[
        ~ Initiation Modifier is the same linked Attribute score we used to calculate save DC
        @value = linkage[table].field[powInitAttr].value
        ]]></calculate>
    </field>
    <field
      id="mRange"
      name="Range Text"
      type="user"
      maxlength="100">
    </field>
    <field
      id="mTarget"
      name="Target Text"
      type="user"
      maxlength="100">
    </field>
    <field
      id="mArea"
      name="Area Text"
      type="user"
      maxlength="100">
    </field>
    <field
      id="mDuration"
      name="Duration Text"
      type="user"
      maxlength="100">
    </field>
    <field
      id="mSave"
      name="Save Text"
      type="user"
      maxlength="100">
    </field>

    <!-- mExValue is an "overflow" field for cases where we need more than 5 abValue fields -->
    <field
      id="mExValue"
      name="Extra Value"
      type="derived"
      maxlength="0">
    </field>

    <!-- TAGS -->
    <tag group="Usage" tag="PWEncounte"/>
    <tag group="SpecType" tag="Attack"/>

    <eval index="20" phase="First" priority="100"><![CDATA[
      ~ THIS WHOLE ROUTINE EXISTS TO TRY AND AUTO-CONVERT POW MANEUVERS TO
      ~ THE NEW CUSTOM UI TAB.

      ~ If we already have correct portal/agent tags then get out now!
      doneif (tagis[hasagent.mHelp?] <> 0)

      ~ Warlord
      If (tagis[hasagent.cCfgPW1] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPW1]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPW1]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPW1"]
      Endif

      If (tagis[hasagent.cCfgPW2] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPW2]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPW2]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPW2"]
      Endif

      If (tagis[hasagent.cCfgPW3] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPW3]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPW3]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPW3"]
      Endif

      If (tagis[hasagent.cCfgPW4] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPW4]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPW4]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPW4"]
      Endif

      If (tagis[hasagent.cCfgPW5] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPW5]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPW6]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPW6"]
      Endif

      If (tagis[hasagent.cCfgPW6] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPW6]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPW6]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPW6"]
      Endif

      If (tagis[hasagent.cHelpPWPC1] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPWPC1]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPWPC1]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPWPC1"]
      Endif

      If (tagis[hasagent.cHelpPWPC2] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPWPC2]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPWPC2]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPWPC2"]
      Endif

      If (tagis[hasagent.cHelpPWPC3] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPWPC3]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPWPC3]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPWPC3"]
      Endif

      If (tagis[hasagent.cHelpPWPC4] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPWPC4]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPWPC4]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPWPC4"]
      Endif

      If (tagis[hasagent.cHelpPWPC5] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPWPC5]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPWPC5]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPWPC5"]
      Endif

      If (tagis[hasagent.cHelpPWPC6] = 1) Then
        perform           tagreplace[hasagent.?,hasagent.mHelpPWPC6]
        perform tagreplace[PowPanelTaken.?,PowPanelTaken.mHelpPWPC6]
        perform setlinkage[table,PWManList,"PowPanelLive.mHelpPWPC6"]
      Endif
      ]]>
    </eval>
    <!-- This forwards HasMan.? tags to the hero. It also correctly increases the number of
         taken Manuevers on the Configurable.
    -->
    <eval index="1" phase="First" priority="10000" name="Setup Maneuver or Stance"><![CDATA[
      ~ Correctly setup the manuever or stance
      ~Call PWsetupMan

      ~ If we are maneuver then process here
      ~-------------------------------------
      If (tagis[mType.Stance] = 0) Then
        ~ Setup the user choice array
        field[usrArray].arraytext[0] = "Not Readied"
        field[usrArray].arraytext[1] = "Readied"

        ~ Create Has Manuever tag
        perform pulltags[Discipline.?,HasMan]

        ~ Assign Has Manuever tag to the hero which allows for Prerequisites checking
        perform forward[HasMan.?]

        ~ Increase the selected manuever count by one
        linkage[table].field[powManSpent].value += 1

        ~ If our manuever is readied then turn on tracker
        If (field[abilActive].value + field[usrIndex].value <> 0) Then

          ~ Set tags so we display on the In-Play tab for usage
          perform assign[User.Tracker]
          perform assign[Helper.ShowSpec]
          perform assign[User.Activation]
          field[trkMax].value += 1

          ~ Set readied tag on Configurator
          perform linkage[table].assign[PathOfWar.ManueverOn]
        Endif

      ~..If we are a stance process here
      ~---------------------------------
      Else
        ~ Create Has Stance tag
        perform pulltags[Discipline.?,HasStance]

        ~ Assign Has Stance tag to the hero which allows for Prerequisites checking
        perform forward[HasStance.?]

        ~ Increase the selected stance count by one
        linkage[table].field[powStaSpent].value += 1

        ~ Set tags so we display on the In-Play tab for usage as a Stance should always display.
        perform assign[Helper.ShowSpec]
        perform assign[User.Activation]

        ~ If our stance is activated then set Stance Activated tag on hero
        If (field[abilActive].value + field[usrIndex].value <> 0) Then
          ~ Set activated stance tag on Configurator
          perform linkage[table].assign[PathOfWar.StanceOn]
          perform hero.assign[PathOfWar.StanceOn]
        Endif

      Endif

      ~ Push our level tag to the discipline object; this is for tracking purposes so that things like the Sleeping Goddess PP bonus can work
      perform hero.findchild[Simple,tagids[Discipline.?]].setfocus
      doneif (state.isfocus = 0)
      perform focus.pushtags[mLevel.?]
      ]]>
    </eval>

    <!--
      This gets the class tag from the configurable and places it on the maneuver. This is
      needed to give an easy way to the print sheet to find the class name.
    -->
    <eval index="2" phase="PreLevel" priority="10000"><![CDATA[
      ~ Set the class this maneuver is attached to
      perform linkage[table].linkage[powClass].pulltags[ClsCountAs.?]
      ]]>
    </eval>

    <!-- This makes sure that the number maneuvers required is valid. This pulls the mPreReq field
         of the manuever.
    -->
    <prereq message="maneuver(s) required.">
      <validate><![CDATA[
        ~ Validate the number of maneuvers needed. The number of maneuvers needed is stored in mPreReq
        ~var ValidManRQ as number
        ~var ValidManTx as string
        ~Call ValidManRQ

        ~ This procedure validates if we have the correct number of required
        ~ maneuvers/stances to take this maneuver.
        ~ ===How to use this Procedure===
        ~ var ValidManRQ as number
        ~ var ValidManTx as string
        ~ Call ValidManRQ
        ~ @valid = ValidManRQ
        ~ @message = ValidManTx

        var ValidManRQ as number
        var ValidManTx as string
        var s2name     as string
        var s2Tag      as string
        var s2TagSta   as string
        var s2TagMan   as string

        ~ Default to requirments are valid
        ValidManRQ = 1

        ~ If a Thing process here
        If (@ispick = 0) Then
          s2Tag = altthing.tagids[Discipline.?]
          s2TagMan = replace(s2Tag,"Discipline","HasMan",0)
          s2TagSta = replace(s2Tag,"Discipline","HasStance",0)

          ~ If we don't have the correct number then we are invalid
          If (hero.tagcountstr[s2TagMan] + hero.tagcountstr[s2TagSta] < altthing.field[mPreReq].value) Then
            ~ not valid
            ValidManRQ = 0
            ~ get discipline name
            s2name = altthing.tagnames[Discipline.?]
            ~ generate error message to be passed back
            ValidManTx = altthing.field[mPreReq].value & " " & s2name & " maneuver(s) required."
          Endif

        ~ If a Pick process here
        ElseIf (@ispick = 1) Then
          s2Tag = altpick.tagids[Discipline.?]
          s2TagMan = replace(s2Tag,"Discipline","HasMan",0)
          s2TagSta = replace(s2Tag,"Discipline","HasStance",0)

          ~ If we don't have the correct number then we are invalid
          If (hero.tagcountstr[s2TagMan] + hero.tagcountstr[s2TagSta] < altpick.field[mPreReq].value) Then
            ~ not valid
            ValidManRQ = 0
            ~ get discipline name
            s2name = altpick.tagnames[Discipline.?]
            ~ generate error message to be passed back
            ValidManTx = altpick.field[mPreReq].value & " " & s2name & " maneuver(s) required."
          Endif
        Endif

        @valid = ValidManRQ
        @message = ValidManTx
        ]]>
      </validate>
    </prereq>
    <!-- This checks after we become a pick that we have a high enough IL to have learned this
         maneuver. This can NOT be done why we are a Thing as we have no idea which class we
         are currently attached to.
    -->
    <prereq message="Higher Initiator Level required.">
      <validate><![CDATA[
        var ManLevel as number
        var ValidManIL as number

        ValidManIL = 1

        ~ We are pick then validate old way
        If (@ispick = 1) Then

          Call ValidManIL

        ~ If we're being added by configurable then lets check the manuever level using
        ~ the new agent way.
        ElseIf (@ispick = 0) Then

          ~ Only try this if we are attached to a agent like a configurable
          If (isagent = 1) Then

            ManLevel = agent.field[powClsLevelAry].value

            ~ Test to see if the level of the manuever is higher than what we can use
            ~ and if so we are NOT valid.
            If (ManLevel < 0) Then
              ValidManIL = 0

            Else
              ~ Check the manuever level vs the default PoW level values
              If (altthing.tagvalue[mLevel.?] > hero.child[mechPoW].field[mechFeat].arrayvalue[ManLevel]) Then
                ValidManIL = 0
              Endif
            Endif
          Endif
        Endif

        @valid = ValidManIL
        ]]>
      </validate>
    </prereq>

  </component>
  <!-- ************************************************************************ -->


  <!-- ================================================== -->
  <!-- Maneuver List UI Panel                             -->
  <!-- ================================================== -->
  <component
    id="PWManList"
    name="Maneuver List"
    autocompset="no"
    hasshortname="yes"
    ispublic="yes">

    <!-- Arrays -->
    <field
      id="cManKnown"
      name="Maneuvers Known"
      type="derived"
      style="array"
      arrayrows="20">
    </field>
    <field
      id="cManReady"
      name="Maneuvers Readied"
      type="derived"
      style="array"
      arrayrows="20">
    </field>
    <field
      id="cStances"
      name="Stances Allowed"
      type="derived"
      style="array"
      arrayrows="20">
    </field>
    <field
      id="cMaxManLvl"
      name="Max Maneuver Level"
      type="derived"
      style="array"
      arrayrows="20">
    </field>
    <field
      id="powClsLevelAry"
      name="Array Class Level"
      type="derived"
      maxlength="0">
    </field>
    <field
      id="cIL"
      name="Initiator Level"
      type="derived"
      maxlength="0">
    </field>
    <field
      id="powInitAttr"
      name="Initiator Attribute Modifier"
      type="derived"
      maxlength="0">
    </field>

    <!-- Number of Maneuvers -->
    <field
      id="powManMax"
      name="Maneuvers table maximum"
      type="derived">
    </field>
    <field
      id="powManSpent"
      name="Maneuvers table spent"
      type="derived">
    </field>
    <field
      id="powManLeft"
      name="Maneuvers table remaining"
      type="derived">
      <calculate phase="Final" priority="50000"><![CDATA[
        @value = field[powManMax].value - field[powManSpent].value
      ]]></calculate>
    </field>
    <field
      id="powManAddText"
      name="Maneuvers table add text"
      type="derived"
      maxlength="500">
    </field>
    <field
      id="powManTitle"
      name="Maneuvers table title"
      type="derived"
      maxlength="500">
    </field>
    <field
      id="powManCandid"
      name="Maneuvers candidate expression"
      type="derived"
      maxlength="5000">
    </field>

    <!-- Number of Stances -->
    <field
      id="powStaMax"
      name="Maneuvers table maximum"
      type="derived">
      </field>
    <field
      id="powStaSpent"
      name="Maneuvers table spent"
      type="derived">
      </field>
    <field
      id="powStaLeft"
      name="Maneuvers table remaining"
      type="derived">
      <calculate phase="Final" priority="50000"><![CDATA[
        @value = field[powStaMax].value - field[powStaSpent].value
        ]]></calculate>
      </field>
    <field
      id="powStaAddText"
      name="Stances table add text"
      type="derived"
      maxlength="500">
    </field>
    <field
      id="powStaTitle"
      name="Maneuvers table title"
      type="derived"
      maxlength="500">
    </field>
    <field
      id="powStaCandid"
      name="Stances candidate expression"
      type="derived"
      maxlength="5000">
    </field>

    <!--
      These linkages link the class to its configurable. This allows an easy way to setup the
      configurable. It also moves all the logic to background scripts instead. Meaning the
      proceadure call can be removed from the Configurables.
    -->
    <linkage linkage="powCfg" optional="yes"/>
    <linkage linkage="powClass"/>

    <!-- The presence of this identity tag on the hero controls the live state of the linked panel -->
    <identity group="PowPanelLive"/>

    <!-- These tag marks everything added to its tables -->
    <identity group="PowPanelTaken"/>

    <!--
        This does some initial setup of tags.
    -->
    <eval index="1" phase="First" priority="50" name="PoW Init Setup"><![CDATA[
      ~ if not attached to a configurable we are done!
      doneif (islinkage[powCfg] = 0)

      var searchexpr as string

      ~ Name the custom ability lists
      linkage[powCfg].field[cfgObject1].text = "Maneuvers"
      linkage[powCfg].field[cfgObject2].text = "Stances"

      ~ Check for additional classes we "could" be linked to.
      ~ This is mostly going to happen with classes like the Unchained Rogue.
      ~ We need to allow changing the linkage to the correct class.
      perform pulltags[ArchCntAs.?,Classes]
      searchexpr = tagids[Classes.?]
      perform hero.findchild[BaseClHelp,searchexpr].setfocus
      ~ If we found an alternate class reset the linkage to that class
      if (state.isfocus <> 0) then
        perform setlinkage[powClass,Class,searchexpr]
      endif

      ~ Pull the Class Counts As tag from the class
      perform linkage[powClass].pulltags[ClsCountAs.?]

      ~ Setup Configurable tags
      perform linkage[powCfg].pushtags[ClsCountAs.?]
      perform linkage[powCfg].pushtags[UseAttr.?]
      perform linkage[powCfg].assign[PathOfWar.StanceUp]
      perform linkage[powCfg].assign[PathOfWar.Config]
      ]]></eval>

    <!--
        This setups the IL information on the Configurable
    -->
    <eval index="2" phase="PostLevel" priority="10" name="PoW Calc IL"><![CDATA[
      ~ If this is a prestige class, stop now, because we're going to inherit our IL from another configurable in the next script
      ~ NOTE: To support special "houserules" from the community we added a new PrCIndMan tag to represent a PrC
      ~       class that does not inherit any of its IL values from another PoW class.
      doneif (linkage[powClass].tagis[ClassType.Prestige] + linkage[powClass].tagis[PathOfWar.Class] - linkage[powClass].tagis[PathOfWar.PrCIndMan] = 2)

      var otherlev as number
      var miPrc as number

      ~ Calculate initiator level
      ~ We count initiating prestige classes at full value, all others (besides the current class) at half value
      foreach pick in hero from Class where "!" & linkage[powClass].tagids[ClassHelp.?]
        if (eachpick.tagis[ClassType.Prestige] + eachpick.tagis[PathOfWar.Class] = 2) then
          miPrc += eachpick.field[cTotalLev].value
        else
          otherlev += eachpick.field[cTotalLev].value
        endif
      nexteach

        ~ Add the PrC levels and half of the other levels to the level of the current class to get our total IL
      field[cIL].value += miPrc + round( otherlev/2,0,-1) + linkage[powClass].field[cTotalLev].value

      ~ if not attached to a configurable we are done!
      doneif (islinkage[powCfg] = 0)

      ~ Set the IL onto the associated configurator to save time for later checks
      linkage[powCfg].field[cfgLevel].value += field[cIL].value
      ]]></eval>

    <!--
        This setups the initiation attribute modifier so the Manuevers/Stances have an easy field to pull from.
    -->
    <eval index="3" phase="PostAttr" priority="100" name="PoW Calc Attribute Bonus"><![CDATA[
        ~ Set the Initiation Attribute Modifier value
        field[powInitAttr].value = hero.findchild[BaseAttr,tagids[UseAttr.?]].field[aModBonus].value
      ]]></eval>

    <!--
        This sets the correct number of Maneuvers Known, Readied, and Stances onto the Configurable based
        upon the class we are linked too.
    -->
    <eval index="4" phase="Final" priority="11000"><![CDATA[
      var level as number

      ~ Calculate the array value which is class level minus one as we start at zero
      field[powClsLevelAry].value += linkage[powClass].field[cTotalLev].value - 1
      level = field[powClsLevelAry].value

      ~ Set up Manuever and Stance expressions here
      field[powManCandid].text = "component.PWManuever & PathOfWar.Manuever & (" & tagids[Discipline.?,"|"] & ")"
      field[powStaCandid].text = "component.PWManuever & PathOfWar.Stance & (" & tagids[Discipline.?,"|"] & ")"

      ~ Set the panels's number of manuevers/stances known
      field[powManMax].value += field[cManKnown].arrayvalue[level]
      field[powStaMax].value += field[cStances].arrayvalue[level]



      if (islinkage[powCfg] <> 0) then

        ~ If we're a normal prestige class, make sure we have chosen an existing maneuver list to work
        ~ from, otherwise don't allow picking any maneuvers yet.
        ~ NOTE: To support special "houserules" from the community we added a new PrCIndMan tag to represent a PrC
        ~       class that does not inherit any of its IL values from another PoW class.
        if (linkage[powClass].tagis[ClassType.Prestige] - linkage[powClass].tagis[PathOfWar.PrCIndMan] = 1) then
          if (hero.childfound[cPWP1Man].field[usrChosen1].ischosen = 0) then
            linkage[powCfg].field[cfgMax1].value = 0
            linkage[powCfg].field[cfgMax2].value = 0
            linkage[powCfg].field[livename].text = linkage[powCfg].tagnames[ClsCountAs.?] & " Maneuvers: Pick Maneuver List on class tab first!"
            done
          endif
        endif
      endif

      ~ If no disciplines setup then display error and stop!
      ~ But don't display the error if this class has to choose disciplines (like the Pathwalker archetype)
      if (tagcount[Discipline.?] = 0) then
        if (linkage[powClass].tagis[PathOfWar.selDisc] = 0) then
          notify "Your class has no Disciplines defined. Please define Disciplines in the editor 'zCommunity->PoW Class Setup'"
        endif
        done
      endif

      if (islinkage[powCfg] <> 0) then
        ~ Set to pull anything that is not a stance
        linkage[powCfg].field[cfgAllow1].text = "PathOfWar.Manuever & (" & tagids[Discipline.?,"|"] & ")"

        ~ Set to pull all the stances
        linkage[powCfg].field[cfgAllow2].text = "PathOfWar.Stance & (" & tagids[Discipline.?,"|"] & ")"

        ~ Enforce maximum maneuver level, if we have a custom progression
        if (tagis[PathOfWar.CstManProg] <> 0) then
          linkage[powCfg].field[cfgAllow1].text &= " & (mLevel.0"
          var i as number
          i = 1
          while (i <= field[cMaxManLvl].arrayvalue[field[cIL].value - 1])
            linkage[powCfg].field[cfgAllow1].text &= " | mLevel." & i
            i += 1
          loop
          linkage[powCfg].field[cfgAllow1].text &= ")"
        endif

        linkage[powCfg].field[cfgMax1].value += field[cManKnown].arrayvalue[level]
        linkage[powCfg].field[cfgMax2].value += field[cStances].arrayvalue[level]

        ~ Set the live name to inform the number of manuevers that can be readied
        linkage[powCfg].field[livename].text = linkage[powCfg].tagnames[ClsCountAs.?] & " Maneuvers Readied: " & linkage[powCfg].tagcount[PathOfWar.ManueverOn] & " of " & field[cManReady].arrayvalue[level]

      endif
      ]]></eval>

    <!--
        Push validation tags to the hero.
    -->
    <eval index="5" phase="Final" priority="50000"><![CDATA[
      ~ Push the Discipline tags to the hero so that Maneuvers can
      ~ validate correctly.
      perform hero.pushtags[Discipline.?]
      ]]></eval>

    <eval index="6" phase="Final" priority="100000" name="Maneuver List Panel Visibility"><![CDATA[
      ~ If we are live then tell the hero to show the maneuver list panel
      perform forward[PowPanelLive.?]
      ]]></eval>

    <eval index="7" phase="Render" priority="10000" name="Maneuver List Panel - Add text"><![CDATA[
      var overspent as number

      ~ Maneuvers
      ~----------------------------------------------------
      if (field[powManLeft].value = 0) then
        field[powManAddText].text = "{text clrdisable}No more maneuvers can be added."
        field[powManTitle].text = "Maneuvers: " & field[powManSpent].value & " of " & field[powManMax].value

      elseif (field[powManLeft].value < 0) then
        overspent = - field[powManLeft].value
        field[powManAddText].text = "{text clrwarning}Too many maneuvers have been added." & " (" & overspent & " overspent)"
        field[powManTitle].text = "Maneuvers: " & "{text clrwarning}" & field[powManSpent].value & " of " & field[powManMax].value & " (" & overspent & " overspent)"

      elseif (field[powManLeft].value > 0) then
        field[powManAddText].text = "{text clrbright}Add more maneuvers (" & field[powManLeft].value & " left)!"
        field[powManTitle].text = "Maneuvers: " & "{text clrbright}" & field[powManSpent].value & " of " & field[powManMax].value & " (" & field[powManLeft].value & " left)"
      endif

      ~ Stances
      ~----------------------------------------------------
      if (field[powStaLeft].value = 0) then
        field[powStaAddText].text = "{text clrdisable}No more stances can be added."
        field[powStaTitle].text = "Stances: " & field[powStaSpent].value & " of " & field[powStaMax].value

      elseif (field[powStaLeft].value < 0) then
        overspent = - field[powStaLeft].value
        field[powStaAddText].text = "{text clrwarning}Too many stances have been added." & " (" & overspent & " overspent)"
        field[powStaTitle].text = "Stances: " & "{text clrwarning}" & field[powStaSpent].value & " of " & field[powStaMax].value & " (" & overspent & " overspent)"

      elseif (field[powStaLeft].value > 0) then
        field[powStaAddText].text = "{text clrbright}Add more stances (" & field[powStaLeft].value & " left)!"
        field[powStaTitle].text = "Stances: " & "{text clrbright}" & field[powStaSpent].value & " of " & field[powStaMax].value & " (" & field[powStaLeft].value & " left)"
      endif

      ]]></eval>

    <!-- Eval Rules -->
    <evalrule index="8" phase="Validation" priority="5000" message="PoW List Maneuvers Incorrect" severity="warning"><![CDATA[
      ~ Overspent
      if (field[powManLeft].value < 0) then
        if (ispanel <> 0) then
          linkvalid = 0
          endif

        @message = "Maneuvers overspent: " & field[powManSpent].value & " of " & field[powManMax].value
        done

      ~ Underspent
      elseif (field[powManLeft].value > 0) then
        if (ispanel <> 0) then
          linkvalid = 0
          endif

        @message = "Maneuvers underspent: " & field[powManSpent].value & " of " & field[powManMax].value
        done
        endif

      ~if neither of those applied, we're good
      @valid = 1
      ]]></evalrule>

    <evalrule index="9" phase="Validation" priority="5000" message="PoW List Stances Incorrect" severity="warning"><![CDATA[
      ~ Overspent
      if (field[powStaLeft].value < 0) then
        if (ispanel <> 0) then
          linkvalid = 0
          endif

        @message = "Stances overspent: " & field[powStaSpent].value & " of " & field[powStaMax].value
        done

      ~ Underspent
      elseif (field[powStaLeft].value > 0) then
        if (ispanel <> 0) then
          linkvalid = 0
          endif

        @message = "Stances underspent: " & field[powStaSpent].value & " of " & field[powStaMax].value
        done
        endif

      ~if neither of those applied, we're good
      @valid = 1
      ]]></evalrule>

  </component>
  <!-- ************************************************************************ -->


  <!-- ================================================================ -->
  <!-- This new component allows for combining the Selection helpers &
       magic school components into a single Thing. This makes it much
       easier for others to make a new custom Disicpline using the
       editor.
    -->
  <!-- ================================================================= -->
  <component
    id="PWDisc"
    name="Path of War Discipline"
    autocompset="no"
    hasshortname="no"
    ispublic="yes">

    <!-- link to the disciplines skills -->
    <linkage linkage="powDiscSk1" optional="yes"/>
    <linkage linkage="powDiscSk2" optional="yes"/>
    <linkage linkage="powDiscSk3" optional="yes"/>
    <linkage linkage="powDiscSk4" optional="yes"/>
    <linkage linkage="powDiscSk5" optional="yes"/>

    <!-- Create a tag for each discipline in the Has Maneuver group
    <identity group="HasMan"/> -->

    <!-- TAGS -->
    <tag group="PathOfWar" tag="Discipline"/>
    <tag group="PathOfWar" tag="selDisc"/>

    <!--
        This does some initial setup of tags.
    -->
    <eval phase="First" priority="50" index="1"><![CDATA[
      ~ Create a Has Manuever & Has Stance tags from the discipline tag
      perform pulltags[Discipline.?,HasMan]
      perform pulltags[Discipline.?,HasStance]
      ~ Create Dark Focus tag from the discipline tag
      perform pulltags[Discipline.?,DarkFocus]

      ~ If linkage set then setup tags
      if (islinkage[powDiscSk1] <> 0) then
        ~ Set the discipline tags onto the class skill
        perform linkage[powDiscSk1].pushtags[Discipline.?]
        perform linkage[powDiscSk1].pulltags[ClassSkill.?]
      endif

      ~ If linkage 2 set then setup tags
      if (islinkage[powDiscSk2] <> 0) then
        ~ Set the discipline tags onto the class skill
        perform linkage[powDiscSk2].pushtags[Discipline.?]
        perform linkage[powDiscSk2].pulltags[ClassSkill.?]
      endif

      ~ If linkage 3 set then setup tags
      if (islinkage[powDiscSk3] <> 0) then
        ~ Set the discipline tags onto the class skill
        perform linkage[powDiscSk3].pushtags[Discipline.?]
        perform linkage[powDiscSk3].pulltags[ClassSkill.?]
      endif

      ~ If linkage 4 set then setup tags
      if (islinkage[powDiscSk4] <> 0) then
        ~ Set the discipline tags onto the class skill
        perform linkage[powDiscSk4].pushtags[Discipline.?]
        perform linkage[powDiscSk4].pulltags[ClassSkill.?]
      endif

      ~ If linkage 5 set then setup tags
      if (islinkage[powDiscSk5] <> 0) then
        ~ Set the discipline tags onto the class skill
        perform linkage[powDiscSk5].pushtags[Discipline.?]
        perform linkage[powDiscSk5].pulltags[ClassSkill.?]
      endif

      ~ If no skill added tags get out now!
      doneif (tagis[SkillAdded.?] = 0)

      ~ If we have SkillAdd.? tags then we have to now loop through
      ~ all the skills applying our Discipline tags.
      foreach pick in hero from BaseSkill where tagids[SkillAdded.?,"|"]
        perform eachpick.pushtags[Discipline.?]
      nexteach
      ]]>
      </eval>

  </component>


  <!-- ==================================================  -->
  <!-- Comment out for now
  <component
    id="PWClsMan"
    name="Class, Manuevers"
    autocompset="no"
    hasshortname="no"
    ispublic="yes">
    <eval index="1" phase="First" priority="1"><![CDATA[
      ~ Setup the names on the selectors
      field[cfgObject1].text = "Maneuvers"
      field[cfgObject2].text = "Stances"

      ~ Assign tags that all configurables must have
      perform assign[PathOfWar.StanceUp]
      perform assign[PathOfWar.Config]
      ]]>
    </eval>
    <eval index="2" phase="Final" priority="11000"><![CDATA[
      ~ Setup the Warlord Maneuvers
      Call PWsetupCfg
      ]]>
    </eval>
    <prereq message="You have too many Manuevers Readied.">
      <validate>
        ~ This makes sure that the number maneuvers that has been readied is is valid.
        var ValidManOn as number
        Call ValidManOn
        @valid = ValidManOn
      </validate>
    </prereq>
    <prereq message="You have activated more stances than allowed.">
      <validate>
        ~ This makes sure that the number of stances activated is valid.
        var ValidStaOn as number
        Call ValidStaOn
        @valid = ValidStaOn
      </validate>
    </prereq>

  </component>
  -->
  <!-- ************************************************************************ -->



  <compset
    id="PWManuever">
    <compref component="PWManuever"/>
    <compref component="Value"/>
    <compref component="Ability"/>
    <compref component="Tracker"/>
    <compref component="Activated"/>
    <compref component="UserSelect"/>
    <compref component="SetName"/>
    <compref component="SpecialTab"/>
    <compref component="StatblName"/>
    <compref component="Custom"/>
  </compset>

  <compset
    id="PWManList"
    forceunique="yes">
    <compref component="PWManList"/>
    <compref component="Value"/>
  </compset>

  <compset
    id="PWDisc"
    forceunique="yes">
    <compref component="PWDisc"/>
    <compref component="SelectHelp"/>
    <compref component="Value"/>
    <compref component="SplSchool"/>
    <compref component="Simple"/>
  </compset>


  <!--
  <compset
    id="PWClsMan">
    <compref component="PWClsMan"/>
    <compref component="Value"/>
    <compref component="Configure"/>
    <compref component="Companion"/>
    <compref component="shortname"/>
  </compset>
  -->

  </document>
